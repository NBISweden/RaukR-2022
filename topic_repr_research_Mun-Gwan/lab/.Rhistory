x = "[Log2] Data points", y = "[Log2] Time (Sec)",
caption = "Scatterplot benchmarking in R. 5 repeats per point and method. Points denote median and size of point denotes standard deviation."
) +
scale_color_brewer(type = "qual", palette = 3) +
scale_x_continuous(labels = scales::comma, trans = "log2", breaks=2^seq(from = 6, to = 24, length.out = 10)) +
scale_y_continuous(labels = scales::comma, trans = "log2") +
#scale_x_continuous(limits = c(0,100000)) +
#scale_y_continuous(limits=c(0,10))+
theme_report()
ggplot(d1, aes(x = points, y = median, color = method)) +
geom_smooth(se = FALSE, size = 0.6, alpha = 0.6) +
geom_point(aes(size = sd), alpha = 0.6) +
geom_vline(aes(xintercept=9000,),linetype=3,color="grey50")+
geom_vline(aes(xintercept=150000,),linetype=3,color="grey50")+
guides(size = "none") +
labs(
x = expression(paste("Log"[2]," Number of data points")),
y = expression(paste("Log"[2]," Time (Sec)")),
caption = "Scatterplot benchmarking in R. 5 repeats per point and method. Points denote median and size of point denotes standard deviation."
) +
scale_color_brewer(type = "qual", palette = 3) +
scale_x_continuous(labels = scales::comma, trans = "log2", breaks=2^seq(from = 6, to = 24, length.out = 10)) +
scale_y_continuous(labels = scales::comma, trans = "log2") +
#scale_x_continuous(limits = c(0,100000)) +
#scale_y_continuous(limits=c(0,10))+
theme_report()
ggplot(d1, aes(x = points, y = median, color = method)) +
geom_smooth(se = FALSE, size = 0.6, alpha = 0.6) +
geom_point(aes(size = sd), alpha = 0.6) +
geom_vline(aes(xintercept=9000,),linetype=3,color="grey50")+
geom_vline(aes(xintercept=150000,),linetype=3,color="grey50")+
guides(size = "none") +
labs(
x = expression(paste("Log"[2]," Number of data points")),
y = expression(paste("Log"[2]," Time ~ (Sec)")),
caption = "Scatterplot benchmarking in R. 5 repeats per point and method. Points denote median and size of point denotes standard deviation."
) +
scale_color_brewer(type = "qual", palette = 3) +
scale_x_continuous(labels = scales::comma, trans = "log2", breaks=2^seq(from = 6, to = 24, length.out = 10)) +
scale_y_continuous(labels = scales::comma, trans = "log2") +
#scale_x_continuous(limits = c(0,100000)) +
#scale_y_continuous(limits=c(0,10))+
theme_report()
ggplot(d1, aes(x = points, y = median, color = method)) +
geom_smooth(se = FALSE, size = 0.6, alpha = 0.6) +
geom_point(aes(size = sd), alpha = 0.6) +
geom_vline(aes(xintercept=9000,),linetype=3,color="grey50")+
geom_vline(aes(xintercept=150000,),linetype=3,color="grey50")+
guides(size = "none") +
labs(
x = expression(paste("Log"[2]," Number of data points")),
y = expression(paste("Log"[2]," Time (Sec)")),
caption = "Scatterplot benchmarking in R. 5 repeats per point and method. Points denote median and size of point denotes standard deviation."
) +
scale_color_brewer(type = "qual", palette = 3) +
scale_x_continuous(labels = scales::comma, trans = "log2", breaks=2^seq(from = 6, to = 24, length.out = 10)) +
scale_y_continuous(labels = scales::comma, trans = "log2") +
#scale_x_continuous(limits = c(0,100000)) +
#scale_y_continuous(limits=c(0,10))+
theme_report()
ggplot(d1, aes(x = points, y = median, color = method)) +
geom_smooth(se = FALSE, size = 0.6, alpha = 0.6) +
geom_point(aes(size = sd), alpha = 0.6) +
geom_vline(aes(xintercept=9000,),linetype=3,color="grey50")+
geom_vline(aes(xintercept=150000,),linetype=3,color="grey50")+
guides(size = "none") +
labs(
x = expression(paste("Log"[2]," Number of data points")),
y = expression(paste("Log"[2]," Time  (Sec)")),
caption = "Scatterplot benchmarking in R. 5 repeats per point and method. Points denote median and size of point denotes standard deviation."
) +
scale_color_brewer(type = "qual", palette = 3) +
scale_x_continuous(labels = scales::comma, trans = "log2", breaks=2^seq(from = 6, to = 24, length.out = 10)) +
scale_y_continuous(labels = scales::comma, trans = "log2") +
#scale_x_continuous(limits = c(0,100000)) +
#scale_y_continuous(limits=c(0,10))+
theme_report()
ggplot(d1, aes(x = points, y = median, color = method)) +
geom_smooth(se = FALSE, size = 0.6, alpha = 0.6) +
geom_point(aes(size = sd), alpha = 0.6) +
geom_vline(aes(xintercept=9000,),linetype=3,color="grey50")+
geom_vline(aes(xintercept=150000,),linetype=3,color="grey50")+
guides(size = "none") +
labs(
x = expression(paste("Log"[2]," Number of data points")),
y = expression(paste("Log"[2]," Time  (Sec)")),
caption = "Scatterplot benchmarking in R. 5 repeats per point and method. Points denote median and size of point denotes standard deviation. 2022 RMF"
) +
scale_color_brewer(type = "qual", palette = 3) +
scale_x_continuous(labels = scales::comma, trans = "log2", breaks=2^seq(from = 6, to = 24, length.out = 10)) +
scale_y_continuous(labels = scales::comma, trans = "log2") +
#scale_x_continuous(limits = c(0,100000)) +
#scale_y_continuous(limits=c(0,10))+
theme_report()
glm(Sepal.Width ~ ., data=iris)
x
x <- glm(Sepal.Width ~ ., data=iris)
x
?dredge
install.packages("MuMIn")
MuMIn::dredge(x)
x
summary(x)
x <- glm(Sepal.Width ~ ., data=iris, na.action = "na.fail")
MuMIn::dredge(x)
setwd("~/")
theme_report <- function (basesize=12,basefamily="Barlow",colour="grey60") {
theme_bw(base_size=basesize,base_family=basefamily) %+replace%
theme(
panel.border=element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.x=element_blank(),
legend.position="top",
legend.direction="horizontal",
legend.justification="center",
strip.background=element_blank(),
axis.ticks.y=element_blank(),
axis.ticks.x=element_line(colour=colour),
plot.caption=element_text(colour=colour,size=basesize-3),
plot.title=element_text(colour=colour),
plot.subtitle=element_text(colour=colour)
)
}
library(microbenchmark)
library(ggplot2)
library(ragg)
library(scattermore)
library(dplyr)
library(foreach)
my.cluster <- parallel::makeCluster(10, type = "PSOCK")
doParallel::registerDoParallel(cl = my.cluster)
ls()
parallel::stopCluster(cl = my.cluster)
theme_report <- function (basesize=12,basefamily="Barlow",colour="grey60") {
theme_bw(base_size=basesize,base_family=basefamily) %+replace%
theme(
panel.border=element_blank(),
panel.grid.minor=element_blank(),
panel.grid.major.x=element_blank(),
legend.position="top",
legend.direction="horizontal",
legend.justification="center",
strip.background=element_blank(),
axis.ticks.y=element_blank(),
axis.ticks.x=element_line(colour=colour),
plot.caption=element_text(colour=colour,size=basesize-3),
plot.title=element_text(colour=colour),
plot.subtitle=element_text(colour=colour)
)
}
library(microbenchmark)
library(ggplot2)
library(ragg)
library(scattermore)
library(dplyr)
library(foreach)
my.cluster <- parallel::makeCluster(3, type = "PSOCK")
doParallel::registerDoParallel(cl = my.cluster)
fn_mb <- function(dfr) {
m <- microbenchmark::microbenchmark(
"base" = {
png("base.png", height = 15, width = 15, res = 300, units = "cm")
plot(dfr$x, dfr$y, cex = 1)
dev.off()
},
"base dot" = {
png("base.png", height = 15, width = 15, res = 300, units = "cm")
plot(dfr$x, dfr$y, cex = 1, pch = ".")
dev.off()
},
"ggplot" = {
png("ggplot.png", height = 15, width = 15, res = 300, units = "cm")
p <- ggplot(dfr, aes(x, y), size = 1) +
geom_point()
print(p)
dev.off()
},
"ggplot dot" = {
png("ggplot.png", height = 15, width = 15, res = 300, units = "cm")
p <- ggplot(dfr, aes(x, y), size = 1, shape = ".") +
geom_point()
print(p)
dev.off()
},
"ragg" = {
ragg::agg_png("ragg.png", height = 15, width = 15, res = 300, units = "cm")
p <- ggplot(dfr, aes(x, y), size = 1) +
geom_point()
print(p)
dev.off()
},
"ragg dot" = {
ragg::agg_png("ragg.png", height = 15, width = 15, res = 300, units = "cm")
p <- ggplot(dfr, aes(x, y), size = 1, shape = ".") +
geom_point()
print(p)
dev.off()
},
"scattermore" = {
png("scattermore.png", height = 15, width = 15, res = 300, units = "cm")
p <- ggplot(dfr, aes(x, y), size = 1) +
geom_scattermore(pixels = c(1000, 1000), pointsize = 3)
print(p)
dev.off()
},
"scattermore dot" = {
png("scattermore.png", height = 15, width = 15, res = 300, units = "cm")
p <- ggplot(dfr, aes(x, y), size = 1, shape = ".") +
geom_scattermore(pixels = c(1000, 1000), pointsize = 3)
print(p)
dev.off()
},
"scattermore+ragg" = {
ragg::agg_png("scattermore-ragg.png", height = 15, width = 15, res = 300, units = "cm")
p <- ggplot(dfr, aes(x, y), size = 1) +
geom_scattermore(pixels = c(1000, 1000), pointsize = 3)
print(p)
dev.off()
},
"scattermore+ragg dot" = {
ragg::agg_png("scattermore-ragg.png", height = 15, width = 15, res = 300, units = "cm")
p <- ggplot(dfr, aes(x, y), size = 1, shape = ".") +
geom_scattermore(pixels = c(1000, 1000), pointsize = 3)
print(p)
dev.off()
},
times = r
)
return(m)
}
start_time <- Sys.time()
r <- 5
s <- 2^seq(from = 25, to = 27, length.out = 3)
lst <- list(length = length(s))
d <- foreach(i = seq_along(s)) %dopar% {
print(paste(i, " of ", length(s)))
library(microbenchmark)
library(ggplot2)
library(ragg)
library(scattermore)
dfr_points <- data.frame(x = rnorm(s[i]), y = rnorm(s[i]))
m <- fn_mb(dfr_points)
dfr <- data.frame(method = m$expr, time = m$time)
dfr$points <- s[i]
dfr
}
Sys.time() - start_time
saveRDS(bind_rows(d), "benchmark-25-27.Rds")
parallel::stopCluster(cl = my.cluster)
gc()
ls()
rm(list=ls())
gc()
shiny::runApp('github/shiny-certificate')
runApp('github/shiny-certificate')
runApp('github/shiny-certificate')
runApp('github/shiny-certificate')
runApp('github/shiny-certificate')
runApp('github/shiny-certificate')
paste0("<img src='colors/",themes,".svg' class='theme-picker-icon'><div class='theme-picker-text'>",themes,"</div></img>")
runApp('github/shiny-certificate')
runApp('github/shiny-certificate')
runApp('github/shiny-certificate')
source("~/github/shiny-certificate/functions.R")
mb <- microbenchmark::microbenchmark(
"pdf"=make_certificate(format_export="pdf"),
#"png"=make_certificate(format_export="png"),
#"jpeg"=make_certificate(format_export="jpeg"),
times=20
)
# 234ms
autoplot(mb)
styler:::style_active_file()
styler:::style_active_file()
runApp('github/shiny-certificate')
remotes::install_github("satijalab/seurat",ref = "develop")
library(Seurat)
library(SeuratData)
brain1 <- LoadData("stxBrain", type = "anterior1")
brain2 <- LoadData("stxBrain", type = "posterior1")
brain <- merge(brain1, brain2)
SpatialDimPlot(brain)
?SpatialDimPlot(brain)
brain
head(brain[[]])
SpatialDimPlot(subset(brain,subset=region=="anterior"))
?DimPlot
?VlnPlot
SpatialDimPlot(subset(brain,idents="anterior1"))
reprex::reprex(session_info = T)
brain <- SCTransform(brain, assay = "Spatial", verbose = TRUE, method = "nb")
brain <- RunPCA(brain, assay = "SCT", verbose = FALSE)
brain <- RunUMAP(brain, reduction = "pca", dims = 1:30)
brain <- SCTransform(brain, assay = "Spatial", verbose = TRUE, method = "poisson")
brain <- RunPCA(brain, assay = "SCT", verbose = FALSE)
brain <- RunUMAP(brain, reduction = "pca", dims = 1:30)
brain <- FindSpatiallyVariableFeatures(brain, assay = 'SCT', features =
VariableFeatures(brain)[1:1000], selection.method = 'markvariogram')
brain <- FindSpatiallyVariableFeatures(brain, assay = 'SCT', features =
VariableFeatures(brain)[1:50], selection.method = 'markvariogram')
setwd("~/Documents/eros/sweden/personal/finance/expenses")
lst <- lapply(2014:2022,function(x) readxl::read_xlsx("expenses.xlsx", sheet=as.character(x), col_names=T))
e <- bind_rows(lst) %>%
setNames(c("date","value","note","category")) %>%
mutate(month=month(date),year=year(date),
category=stringr::str_to_title(category))
#load libraries
library(lubridate)
library(rmarkdown)
library(knitr)
library(randomcoloR)
library(readxl)
library(dplyr)
library(tidyr)
library(highcharter)
lst <- lapply(2014:2022,function(x) readxl::read_xlsx("expenses.xlsx", sheet=as.character(x), col_names=T))
e <- bind_rows(lst) %>%
setNames(c("date","value","note","category")) %>%
mutate(month=month(date),year=year(date),
category=stringr::str_to_title(category))
col_cat <- randomcoloR::distinctColorPalette(length(unique(e$category)))
#names(col_cat) <- unique(e$category)
e1 <- e %>%
select(-date) %>%
group_by(year,month,category)%>%
summarise(value=sum(value)) %>%
mutate(date=as_date(paste0(year,"-",month,"-01")))
col_year <- randomcoloR::distinctColorPalette(length(unique(e1$year)))
#names(col_year) <- unique(e1$year)
e
e1
e1 %>% group_by(category) %>% summarise(mean=mean(value),sd=sd(value))
e1 %>% group_by(category) %>% summarise(mean=round(mean(value),0),sd=round(sd(value),0))
e1 %>% group_by(year,category) %>% summarise(mean=round(mean(value),0),sd=round(sd(value),0))
e1 %>% group_by(year,month) %>% summarise(mean=round(mean(value),0),sd=round(sd(value),0))
e1 %>% group_by(year,month) %>% summarise(mean=round(mean(value),0),sd=round(sd(value),0)) %>% arrange(-year,-month)
e1 %>% group_by(year,month) %>% summarise(total=round(sum(value),0)) %>% arrange(-year,-month)
e1 %>% group_by(year,month) %>% summarise(total=round(sum(value,na.rm=T),0)) %>% arrange(-year,-month)
e1 %>% group_by(year,month) %>%
summarise(total=round(sum(value,na.rm=T),0)) %>%
ungroup() %>%
group_by(year) %>%
summarise(mean_total=round(mean(total),0)) %>%
arrange(-year,-month)
e1 %>% group_by(year,month) %>%
summarise(total=round(sum(value,na.rm=T),0)) %>%
ungroup() %>%
group_by(year) %>%
summarise(mean_total=round(mean(total),0))
e1 %>%
group_by(year,month) %>%
summarise(total=round(sum(value,na.rm=T),0)) %>%
ungroup() %>%
group_by(year) %>%
summarise(mean_total=round(mean(total),0)) %>%
arrange(-year)
e1 %>% group_by(year,category) %>% summarise(mean=round(mean(value),0),sd=round(sd(value),0)) %>%
arrange(-year)
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value),0),sd=round(sd(value),0)) %>%
pivot_wider(names_from="category",values_from="value") %>%
arrange(-year)
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value),0),sd=round(sd(value),0)) %>%
pivot_wider(names_from="category",values_from="value")
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value),0),sd=round(sd(value),0))
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value),0)) %>%
pivot_wider(names_from="category",values_from="value") %>%
arrange(-year)
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value),0)) %>%
pivot_wider(names_from="category",values_from="value")
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value),0))
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value),0)) %>%
pivot_wider(names_from="category",values_from="mean") %>%
arrange(-year)
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value,na.rm=TRUE),0)) %>%
arrange(-year) %>%
ggplot(aes(x=category,y=year))+
geom_tile(aes(fill=mean))
library(ggplot2)
e1 %>%
group_by(year,month) %>%
summarise(total=round(sum(value,na.rm=T),0)) %>%
ungroup() %>%
group_by(year) %>%
summarise(mean_total=round(mean(total),0)) %>%
arrange(-year)
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value,na.rm=TRUE),0)) %>%
arrange(-year) %>%
ggplot(aes(x=category,y=year))+
geom_tile(aes(fill=mean))
e1 %>%
group_by(as.factor(year),category) %>%
summarise(mean=round(mean(value,na.rm=TRUE),0)) %>%
arrange(-year) %>%
ggplot(aes(x=category,y=year))+
geom_tile(aes(fill=mean))+
labs(x="",y="")+
theme_bw()
e1 %>%
group_by(as.factor(year),category) %>%
summarise(mean=round(mean(value,na.rm=TRUE),0)) %>%
arrange(-year) %>%
ggplot(aes(x=category,y=year))+
geom_tile(aes(fill=mean))+
labs(x="",y="")
e1 %>%
group_by(as.factor(year),category) %>%
summarise(mean=round(mean(value,na.rm=TRUE),0)) %>%
arrange(-year) %>%
ggplot(aes(x=category,y=year))+
geom_tile(aes(fill=mean))
e1
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value,na.rm=TRUE),0)) %>%
arrange(-year) %>%
ggplot(aes(x=category,y=factor(year)))+
geom_tile(aes(fill=mean))+
labs(x="",y="")+
theme_bw()
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value,na.rm=TRUE),0)) %>%
arrange(-year) %>%
ggplot(aes(x=category,y=factor(year)))+
geom_tile(aes(fill=mean))+
scale_fill_viridis_c()+
labs(x="",y="")+
theme_bw()
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value,na.rm=TRUE),0)) %>%
arrange(-year) %>%
ggplot(aes(x=category,y=factor(year)))+
geom_tile(aes(fill=log10(mean+1)))+
scale_fill_viridis_c()+
labs(x="",y="")+
theme_bw()
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value,na.rm=TRUE),0)) %>%
arrange(-year) %>%
ggplot(aes(x=category,y=factor(year)))+
geom_tile(aes(fill=log10(mean+1)))+
scale_fill_viridis_c()+
labs(x="",y="")+
theme_bw()
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value,na.rm=TRUE),0)) %>%
arrange(-year) %>%
ggplot(aes(x=category,y=factor(year)))+
geom_tile(aes(fill=log10(mean+1)))+
geom_text(label=mean)+
scale_fill_viridis_c()+
labs(x="",y="")+
theme_bw()
e1 %>%
group_by(year,category) %>%
summarise(mean=round(mean(value,na.rm=TRUE),0)) %>%
arrange(-year) %>%
ggplot(aes(x=category,y=factor(year)))+
geom_tile(aes(fill=log10(mean+1)))+
geom_text(aes(label=mean))+
scale_fill_viridis_c()+
labs(x="",y="")+
theme_bw()
e1
getwd()
rmarkdown::render("expenses.Rmd")
?prettydoc::html_pretty
rmarkdown::render("expenses.Rmd")
rmarkdown::render("expenses.Rmd")
library(markdown)
library(knitr)
library(rmarkdown)
library(revealjs)
rmarkdown::render("rr_lab.Rmd")
setwd("~/github/RaukR-2022/docs/rr/lab")
rmarkdown::render("rr_lab.Rmd")
rmarkdown::render("rr_lab.Rmd")
rmarkdown::render("rr_challenge_report.Rmd")
rmarkdown::render("rr_challenge_ioslides.Rmd")
rmarkdown::render("rr_challenge_revealjs.Rmd")
rmarkdown::render("rr_challenge_xaringan.Rmd")
install.packages("janitor")
library(patchwork)
x <- ggplot(iris) + geom_bar(aes(x=Sepal.Length),stat="bin")
y <- ggplot(iris) + geom_bar(aes(x=Species),stat="count")
z <- ggplot(iris) + geom_bar(aes(x=Species,y=Sepal.Length),stat="identity")
wrap_plots(x,y,z,nrow=1)
1.3*3
xaringan:::inf_mr()
?wrap_plots
servr::daemon_stop()
